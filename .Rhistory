for aline in fasta:
a = aline.rsplit()[0]
if len(a) > 4:
print(a + " The length is:" + str(len(a)))
elif len(a) < 4:
print(a)
#iterate over a file line by line....a
fasta =  open("file.fasta", "r")
count = 0
for aline in fasta:
count = count + 1
a = aline.rsplit()[0]
if len(a) > 4:
my_file = open("out_test/out_sea" + str(count), "w")
my_file.write(a)
my_file.close()
print(a + " The length is:" + str(len(a)))
elif len(a) < 4:
my_file = open("out_test/out_header" + str(count), "w")
my_file.write(a)
my_file.close()
print(a)
if count % 2 == 1:
my_file = open("out_test/out_header_seq" + str(count), "w")
my_file.write(a + "\n")
my_file.close()
if count % 2 == 0:
my_file = open("out_test/out_header_seq" + str(count), "a")
my_file.write(a + "\n")
my_file.close()
#iterate over a file line by line....a
fasta =  open("file.fasta", "r")
count = 0
for aline in fasta:
count = count + 1
a = aline.rsplit()[0]
if len(a) > 4:
print(a + " The length is:" + str(len(a)))
elif len(a) < 4:
print(a)
#iterate over a file line by line....a
fasta =  open("file.fasta", "r")
count = 0
for aline in fasta:
a = aline.rsplit()[0]
if len(a) > 4:
print(a + " The length is:" + str(len(a)))
elif len(a) < 4:
print(a)
count = count + 1
#iterate over a file line by line....a
fasta =  open("file.fasta", "r")
count = 0
for aline in fasta:
a = aline.rsplit()[0]
if len(a) > 4:
print(a + " The length is:" + str(len(a)))
elif len(a) < 4:
print(a)
#count = count + 1
#iterate over a file line by line....a
fasta =  open("file.fasta", "r")
count = 0
for aline in fasta:
a = aline.rsplit()[0]
if len(a) > 4:
print(a + " The length is:" + str(len(a)))
elif len(a) < 4:
print(a)
#iterate over a file line by line....a
fasta =  open("file.fasta", "r")
for aline in fasta:
a = aline.rsplit()[0]
if len(a) > 4:
print(a + " The length is:" + str(len(a)))
elif len(a) < 4:
print(a)
unt
count
#iterate over a file line by line....a
count = 0
fasta =  open("file.fasta", "r")
for aline in fasta:
a = aline.rsplit()[0]
if len(a) > 4:
print(a + " The length is:" + str(len(a)))
elif len(a) < 4:
print(a)
#iterate over a file line by line....a
count = 0
fasta =  open("file.fasta", "r")
for aline in fasta:
a = aline.rsplit()[0]
if len(a) > 4:
print(a + " The length is:" + str(len(a)))
elif len(a) < 4:
print(a)
fasta =  open("file.fasta", "r")
for aline in fasta:
a = aline.rsplit()[0]
if len(a) > 4:
print(a + " The length is:" + str(len(a)))
elif len(a) < 4:
print(a)
count = 222
fasta =  open("file.fasta", "r")
for aline in fasta:
a = aline.rsplit()[0]
if len(a) > 4:
print(a + " The length is:" + str(len(a)))
elif len(a) < 4:
print(a)
#iterate over a file line by line....a
count = 222
fasta =  open("file.fasta", "r")
for aline in fasta:
a = aline.rsplit()[0]
if len(a) > 4:
print(a + " The length is:" + str(len(a)))
elif len(a) < 4:
print(a)
#iterate over a file line by line....a
count = 222
#
fasta =  open("file.fasta", "r")
for aline in fasta:
a = aline.rsplit()[0]
if len(a) > 4:
print(a + " The length is:" + str(len(a)))
elif len(a) < 4:
print(a)
#iterate over a file line by line....a
count = 222
#
fasta =  open("file.fasta", "r")
for aline in fasta:
a = aline.rsplit()[0]
if len(a) > 4:
print(a + " The length is:" + str(len(a)))
elif len(a) < 4:
print(a)
count = 0
fasta =  open("file.fasta", "r")
for aline in fasta:
a = aline.rsplit()[0]
if len(a) > 4:
print(a + " The length is:" + str(len(a)))
elif len(a) < 4:
print(a)
count = count + 1
count
count = 0
i = 1
while i < 6:
print(i)
i += 1
count = 0
fasta =  open("file.fasta", "r")
for aline in fasta:
count = count + 1
a = aline.rsplit()[0]
if len(a) > 4:
my_file = open("out_test/out_sea" + str(count), "w")
my_file.write(a)
my_file.close()
print(a + " The length is:" + str(len(a)))
elif len(a) < 4:
my_file = open("out_test/out_header" + str(count), "w")
my_file.write(a)
my_file.close()
print(a)
if count % 2 == 1:
my_file = open("out_test/out_header_seq" + str(count), "w")
my_file.write(a + "\n")
my_file.close()
if count % 2 == 0:
my_file = open("out_test/out_header_seq" + str(count), "a")
my_file.write(a + "\n")
my_file.close()
count
a = aline.rsplit()[0]
a
aline
my_file = open("out_test/out_header" + str(count), "w")
my_file
my_file.write(a)
my_file.close()
print(a)
count = 0
fasta =  open("file.fasta", "r")
for aline in fasta:
count = count + 1
a = aline.rsplit()[0]
if len(a) > 4:
my_file = open("out_test/out_sea" + str(count), "w")
my_file.write(a)
my_file.close()
print(a + " The length is:" + str(len(a)))
elif len(a) < 4:
my_file = open("out_test/out_header" + str(count), "w")
my_file.write(a)
my_file.close()
print(a)
len(a)
len(a) < 4
len(a) < 4:
elif len(a) < 4:
if len(a) < 4:
print(a)
accs = ['ab56', 'bh84', 'hv76', 'ay93', 'ap97', 'bd72']
for accession in accs:
if accession.startswith('a'):
file1.write(accession + "\n")
elif accession.startswith('b'):
file2.write(accession + "\n")
else:
file3.write(accession + "\n")
accs = ['ab56', 'bh84', 'hv76', 'ay93', 'ap97', 'bd72']
for accession in accs:
if accession.startswith('a'):
file1.write(accession + "\n")
elif accession.startswith('b'):
file2.write(accession + "\n")
else:
file3.write(accession + "\n")
expression_level = 125
if expression_level > 100:
print("gene is highly expressed")
else:
print("gene is lowly expressed")
file1 = open("one.txt", "w")
file2 = open("two.txt", "w")
accs = ['ab56', 'bh84', 'hv76', 'ay93', 'ap97', 'bd72']
for accession in accs:
if accession.startswith('a'):
file1.write(accession + "\n")
else:
file2.write(accession + "\n")
count
count=0
fasta =  open("file.fasta", "r")
for line in fasta:
count = count + 1
seq_head = line.rsplit()[0]
if len(seq_head) > 4:
my_file = open("out_test/out_sea" + str(count), "w")
my_file.write(seq_head)
my_file.close()
print(seq_head + " The length is:" + str(len(a)))
elif len(seq_head) < 4:
my_file = open("out_test/out_header" + str(count), "w")
my_file.write(seq_head)
my_file.close()
print(seq_head)
fasta =  open("file.fasta", "r")
for line in fasta:
count = count + 1
seq_head = line.rsplit()[0]
if len(seq_head) > 4:
my_file = open("out_test/out_sea" + str(count), "w")
my_file.write(seq_head)
print(seq_head + " The length is:" + str(len(a)))
elif len(seq_head) < 4:
my_file = open("out_test/out_header" + str(count), "w")
my_file.write(seq_head)
print(seq_head)
count
count = 1
count = 0
fasta =  open("file.fasta", "r")
for line in fasta:
count = count + 1
seq_head = line.rsplit()[0]
if len(seq_head) > 4:
my_file = open("out_test/out_sea" + str(count), "w")
my_file.write(seq_head)
print(seq_head + " The length is:" + str(len(a)))
elif len(seq_head) < 4:
my_file = open("out_test/out_header" + str(count), "w")
my_file.write(seq_head)
print(seq_head)
count
count = 0
fasta =  open("file.fasta", "r")
for line in fasta:
count = count + 1
seq_head = line.rsplit()[0]
if len(seq_head) > 4:
my_file = open("out_test/out_sea" + str(count), "w")
my_file.write(seq_head)
elif len(seq_head) < 4:
my_file = open("out_test/out_header" + str(count), "w")
my_file.write(seq_head)
if count % 2 == 1:
my_file = open("out_test/out_header_seq" + str(count), "w")
my_file.write(a + "\n")
if count % 2 == 0:
my_file = open("out_test/out_header_seq" + str(count), "a")
my_file.write(a + "\n")
fasta =  open("file.fasta", "r")
for line in fasta:
count = count + 1
seq_head = line.rsplit()[0]
if len(seq_head) > 4:
my_file = open("out_test/out_sea" + str(count), "w")
my_file.write(seq_head)
if count % 2 == 1:
my_file = open("out_test/out_header_seq" + str(count), "w")
my_file.write(a + "\n")
if count % 2 == 0:
my_file = open("out_test/out_header_seq" + str(count), "a")
my_file.write(a + "\n")
elif len(seq_head) < 4:
my_file = open("out_test/out_header" + str(count), "w")
my_file.write(seq_head)
count
count = 0
fasta =  open("file.fasta", "r")
for line in fasta:
count = count + 1
seq_head = line.rsplit()[0]
if len(seq_head) > 4:
my_file = open("out_test/out_sea" + str(count), "w")
my_file.write(seq_head)
if count % 2 == 1:
my_file = open("out_test/out_header_seq" + str(count), "w")
my_file.write(a + "\n")
if count % 2 == 0:
my_file = open("out_test/out_header_seq" + str(count), "a")
my_file.write(a + "\n")
count = 0
fasta =  open("file.fasta", "r")
for line in fasta:
count = count + 1
seq_head = line.rsplit()[0]
if len(seq_head) > 4:
my_file = open("out_test/out_sea" + str(count), "w")
my_file.write(seq_head)
if count % 2 == 1:
my_file = open("out_test/out_header_seq" + str(count), "w")
my_file.write(a + "\n")
if count % 2 == 0:
my_file = open("out_test/out_header_seq" + str(count), "a")
my_file.write(a + "\n")
a
count
count = 0
fasta =  open("file.fasta", "r")
for line in fasta:
count = count + 1
seq_head = line.rsplit()[0]
if len(seq_head) > 4:
my_file = open("out_test/out_seq" + str(count), "w")
my_file.write(seq_head)
if count % 2 == 1:
my_file = open("out_test/out_header_seq" + str(count), "w")
my_file.write(seq_head + "\n")
if count % 2 == 0:
my_file = open("out_test/out_header_seq" + str(count-1), "a")
my_file.write(seq_head + "\n")
file1 = open("one.txt", "w")
file2 = open("two.txt", "w")
accs = ['ab56', 'bh84', 'hv76', 'ay93', 'ap97', 'bd72']
for accession in accs:
if accession.startswith('a'):
file1.write(accession + "\n")
else:
file2.write(accession + "\n")
accs = ['ab56', 'bh84', 'hv76', 'ay93', 'ap97', 'bd72']
for accession in accs:
if accession.startswith('a'):
file1.write(accession + "\n")
elif accession.startswith('b'):
file2.write(accession + "\n")
else:
file3.write(accession + "\n")
file1 = open("one.txt", "w")
file2 = open("two.txt", "w")
accs = ['ab56', 'bh84', 'hv76', 'ay93', 'ap97', 'bd72']
for accession in accs:
if accession.startswith('a'):
file1.write(accession + "\n")
elif accession.startswith('b'):
file2.write(accession + "\n")
else:
file3.write(accession + "\n")
for accession in accs:
if accession.startswith('a'):
accs
accs = ['ab56', 'bh84', 'hv76', 'ay93', 'ap97', 'bd72']
accs
for accession in accs:
if accession.startswith('a'):
count = 0
fasta =  open("file.fasta", "r")
for line in fasta:
count = count + 1
seq_head = line.rsplit()[0]
print(seq_head)
if len(seq_head) > 4:
my_file = open("out_test/out_seq" + str(count), "w")
my_file.write(seq_head)
if count % 2 == 1:
my_file = open("out_test/out_header_seq" + str(count), "w")
my_file.write(seq_head + "\n")
if count % 2 == 0:
my_file = open("out_test/out_header_seq" + str(count-1), "a")
my_file.write(seq_head + "\n")
file.close()
my_file.close()
reticulate::repl_python()
reticulate::repl_python()
print(r"\t\n")
import re
print("\t\n")
dna = "ATCGCGAATTCAC"
if re.search(r"GAATTC", dna):
print("restriction site found!")
re.search(r"GAATTC", dna)
re.search(r"GG(A|T)CC", dna)
re.search(r"GAA(T|A)TC", dna)
re.search(r"GAA.TC", dna)
re.search(r"GGG(AAA)?TTT", dna)
dna = "ATCGCGAATTCAC"
re.search(r"G(AAA)?TTC", dna)
re.search(r"G(A)?TTC", dna)
re.search(r"GAA(A)?TTC", dna)
re.search(r"GA(A)?TTC", dna)
re.search(r"GA*TTC", dna) #any nb of A....
re.search(r"GA*TTC", dna) #any nb of A....
re.search(r"GA*TTC", dna)==T
re.search(r"GA*TTC", dna) ==  TRUE
print(re.search(r"GA*TTC", dna))
if re.search(r"GAATTC", dna):
print("adad")
dna = "CGATNCGGAACGATC"
m = re.search(r"[^ATGC]", dna)
m
m.group()
m = re.search(r"GA*TTC", dna) #an
m
dna
dna = "ATCGCGAATTCAC"à
dna = "ATCGCGAATTCAC"
m = re.search(r"GA*TTC", dna) #any nb of A..
m
m.group()
scientific_name = "Homo sapiens"
m = re.search("(.+) (.+)", scientific_name)
if m:
genus = m.group(1)
species = m.group(2)
print("genus is " + genus + ", species is " + species)
m
m.group()
m.group(1)
m.group(12)
m.group(2)
m.start()
m.start(1)
m.start(2)
dna = "CTGCATTATATCGTACGAAATTATACGCGCG"
matches = re.finditer(r"[AT]{6,}", dna)
result = []
for m in matches:
result.append(m.group())
print(result)
dna = "CTGCATTATATCGTACGAAATTATACGCGCG"
result = re.findall(r"[AT]{6,}", dna)
print(result)
dna = "ACTNGCATRGCTACGTYACGATSCGAWTCG"
runs = re.split(r"[^ATGC]", dna)
print(runs)
dna = "ATGATCGATCGAGTGA"
dinucleotides = ['AA','AT','AG','AC',
'TA','TT','TG','TC',
'GA','GT','GG','GC',
'CA','CT','CG','CC']
all_counts = []
for dinucleotide in dinucleotides:
count = dna.count(dinucleotide)
print("count is " + str(count) + " for " + dinucleotide)
all_counts.append(count)
all_counts
dna = "ATGATCGATCGAGTGA"
dinucleotides = ['AA','AT','AG','AC',
'TA','TT','TG','TC',
'GA','GT','GG','GC',
'CA','CT','CG','CC']
all_counts = []
for dinucleotide in dinucleotides:
count = dna.count(dinucleotide)
reticulate::repl_python()
enzymes = {}
enzymes['EcoRI'] = r'GAATTC'
enzymes['AvaII] =  r'GG(A|T)CC'
enzymes['BisI'] =  r'GC[ATGC]GC'
enzymes
enzymes['BisI']
8*5
all_counts
for dinucleotide, count in all_counts.items():
if count == 2:
print(dinucleotide)
70000/10
10/70000
10/700
10/300
10000/300000000
10000/3000000
10000/7000000
10000/70000
